datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    binaryTargets   = ["native"]
    previewFeatures = ["orderByRelation", "referentialActions"]
}

model User {
    id                       String                     @id @default(cuid())
    email                    String                     @unique
    name                     String?
    password                 String
    Tree                     Tree[]
    Fund                     Fund[]
    role                     String                     @default("user")
    TreeLike                 TreeLike[]
    TreeScoring              TreeScoring[]
    Volunteering             Volunteering[]
    VolunteeringVerification VolunteeringVerification[]
}

enum TreeCondition {
    SlightlyBroken
    CompletelyBroken
    Perfect
    NeedsReplacement
}

model Tree {
    id         String        @id @default(cuid())
    name       String
    discoverer User          @relation(fields: [userId], references: [id])
    userId     String
    location   String
    type       String
    thumb      String
    image      String
    conditions TreeCondition

    Fund         Fund[]
    TreeLike     TreeLike[]
    TreeScoring  TreeScoring[]
    Volunteering Volunteering[]
}

enum FundStatus {
    Pending
    Approved
    Refunded
    Rejected
}

model Fund {
    id        String   @id @default(cuid())
    tree      Tree     @relation(fields: [treeId], references: [id])
    by        User     @relation(fields: [userId], references: [id])
    paymentId String[]
    orderId   String
    status    String

    treeId String
    userId String
}

model TreeLike {
    id   String @id @default(cuid())
    tree Tree   @relation(fields: [treeId], references: [id])
    by   User   @relation(fields: [userId], references: [id])

    treeId String
    userId String
}

model TreeScoring {
    id      String @id @default(cuid())
    tree    Tree   @relation(fields: [treeId], references: [id])
    by      User   @relation(fields: [userId], references: [id])
    score   Int    @default(0)
    comment String

    treeId String
    userId String
}

enum VolunteeringStatus {
    Interested
    Evaluated
    Accepted
    Rejected
    Completed
    Reported
}

model Volunteering {
    id          String             @id @default(cuid())
    tree        Tree               @relation(fields: [treeId], references: [id])
    by          User               @relation(fields: [userId], references: [id])
    location    String
    comment     String
    status      VolunteeringStatus @default(Interested)
    createdAt   DateTime           @default(now())
    completedAt DateTime?
    proof       String[]

    treeId                   String
    userId                   String
    VolunteeringVerification VolunteeringVerification[]
}

model VolunteeringVerification {
    id             String       @id @default(cuid())
    volunteering   Volunteering @relation(fields: [volunteeringId], references: [id])
    verifier       User         @relation(fields: [userId], references: [id])
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    volunteeringId String
    userId         String
}
